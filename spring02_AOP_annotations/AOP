将某段代码（日志）动态的切入（不把日志代码写死在业务逻辑方法中）到指定方法的指定位置进行运行的编程方式

AOP的使用步骤：
1、导包
2、写配置
    1.将目标类和切面类（封装了通知方法（在目标方法执行前后执行的方法））加入到ioc容器中
    2.告诉spring哪个是切面
    3.告诉spring切面类中的方法何时执行
    4.开启aop功能

spring的通知类型
@Before：在目标方法之前运行               前置通知
@After：在目标方法结束之后                后置通知
@AfterReturning：在目标方法正常返回之后   返回通知
@AfterThrowing：在目标方法抛出异常之后    异常通知
@Around                                   环绕通知
环绕通知是spring最强大的环绕通知，其本质是动态代理。优先于普通通知。
环绕通知的执行顺序：环绕前置----普通前置----方法执行----环绕正常返回/出现异常----环绕后置----普通后置----普通返回/异常
注意：当出现异常时，环绕通知会拿掉异常，导致普通通知会返回null，因此通常情况下需要抛出异常

通知方法的执行顺序：
    正常执行：@Before前置通知--->@After后置通知---->@AfterReturning返回通知
    异常执行：@Before前置通知--->@After后置通知---->@AfterThrowing异常通知

切入点表达式写法：
    固定格式：execution(访问权限符，返回值类型，方法全类名(参数列表))
        如：execution(public int com.feng.spring.inter.impl.MyMathCalculator.*(int,int))
    通配符：*:1.匹配一个或多个字符
              2.匹配任意一个参数
              3.只能匹配一层路径
              4.权限位置可不写
            ..：1.匹配任意类型参数
                2.匹配任意多层路径
    最简单的写法：execution(* *.*(..))
    最精确的写法：execution(public int com.feng.spring.inter.impl.MyMathCalculator.*(int,int))

AOP使用场景：
    1、AOP加日志保存到数据库；
    2、AOP做权限验证；
    3、AOP做事务控制


